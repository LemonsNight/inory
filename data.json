{
    "data":[
        {
            "id":"0",
            "title":"日常吐槽",
            "time":"2020-7-5",
            "content":"过几天弄个音乐播放器好了~，我看看应该怎么弄，网易的nodeJS需要服务器，估计不太行，看看有没有什么办法弄个在线的,没有服务器还是挺多东西弄不了的，先把界面做好吧,网站还在建设中，所以功能不方便，不过文章是可以正常发布了。。。",
            "imgurl":"https://uploadstatic.mihoyo.com/contentweb/20200709/2020070912220829234.png",
            "author":"inory"
        },
        {
            "title": "wangEditor",
            "content": "<p>由于莫得后台服务器，所以打算直接弄个编辑器，然后生成txt或者json文件来复制，这样就方便挺多了，后期可能还会优化，个人推荐直接生成json文件，方便复制！！！哈哈哈。</p><p>贴上代码</p><pre><p>&lt;template&gt;<br>    &lt;div id=\"editor\"&gt;<br>        <br>       &lt;div ref=\"editorElem\"&gt;&lt;/div&gt;<br>       &lt;br&gt;<br>        &lt;div&gt;        <br>           &lt;input type=\"text\" ref=\"title\" placeholder=\"标题\"&gt;<br>           &lt;input type=\"text\" ref=\"time\" placeholder=\"时间\"&gt;<br>           &lt;input type=\"text\" ref=\"author\" placeholder=\"作者\"&gt;<br>           &lt;input type=\"text\" ref=\"id\" placeholder=\"ID\"&gt;<br>           &lt;input type=\"file\" ref=\"fileE\" multiple=\"multiple\" accept=\".png,.jpeg,.jpg\"&gt;<br>           &lt;button @click=\"jsonevent\"&gt;GO&lt;/button&gt;<br>       &lt;/div&gt;<br>       <br>    &lt;/div&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br>import E from \"wangeditor\";<br>export default {<br>    name:\"Editor\",<br>    data() {<br>        return {<br>            editorval:{<br>                title:\"\",   <br>                content:\"\", <br>                author:\"\",<br>                timer:\"\",<br>                id:\"\",<br>                imgurl:\"\"<br>            } <br>        }<br>    },<br>    mounted() {<br>        this.editor = new E(this.$refs.editorElem);// vue挂载完后,实例化对象绑定div<br>        this.editor.create();//创建编辑器<br>    },<br>    methods: {<br>        jsonevent(){<br>            this.editorval = {<br>                title:this.$refs.title.value,<br>                content:this.editor.$textElem[0].innerHTML,<br>                author:this.$refs.author.value||`inory`,<br>                time:this.$refs.time.value || this.gettime,<br>                id:this.$refs.id.value,<br>                imgurl:`data/${this.$refs.fileE.files[0].name}`<br>            }<br>            this.fsenvet()<br>        },<br>        fsenvet(){<br>            console.log()<br>            let FileSaver = require('./js/FileSaver.min.js'); <br>            let content = JSON.stringify(this.editorval);<br>            let blob = new Blob([content ], {type: \"text/plain;charset=utf-8\"}); <br>            console.log(FileSaver,content,blob)<br>            FileSaver.saveAs(blob, \"inory.json\");<br>        }<br>    },<br>    computed: {<br>        gettime: function(){<br>            let getnewtime = new Date();<br>            let gettimer  = `${getnewtime.getFullYear()}-${getnewtime.getMonth()+1}-${getnewtime.getDate()}`<br>            return gettimer<br>        }<br>    },<br>}<br>&lt;/script&gt;</p></pre><p>主要就是引入FileSaver.js</p><p>链接：https://www.kancloud.cn/wangfupeng/wangeditor3/332599​&nbsp;</p>",
            "author": "inory",
            "time": "2020-07-07",
            "id": "1",
            "imgurl": "https://uploadstatic.mihoyo.com/contentweb/20191115/2019111515510150417.jpg"
        },
        {
            "title": "关我播放器的制作",
            "content": "<p>最近仿照网易音乐播放器做了个界面，因为vue是数据驱动，所以我尽可能的没去用JS的原生去操作DOM，不过应该是基本都没用到，播放器还有很多功能没做，只是写了个界面和做了播放的基础功能（随机播放顺序播放这些），用了axios去请求的数据和audio的一些自带的属性，过几天完善下歌词滚动，然后整个迷你播放器，符合常规，其他功能日后完善，目前的想法是，把VUE的所有能用的东西全部写到做到博客里面，也就是DEMO=。=</p><p>播放器的使用方法就是点击右上角的按钮切换显示。</p><p>还有一点就是谷歌的浏览器不支持自带播放的功能，这是谷歌自己所设置的东西，原因是怕用户点开网站，突然冒出声音，吓到用户，所以做了人性化设置</p><p>其他浏览器还是可以的。</p>",
            "author": "inory",
            "time": "2020-7-13",
            "id": "2",
            "imgurl": "https://uploadstatic.mihoyo.com/contentweb/20191129/2019112916313715808.jpg"
        },
		{
		  "title": "ES6之let命令和const命令",
		  "content": "<h2 id=\"let-命令\">let 命令</h2><h3 id=\"基本用法\">基本用法</h3><p>ES6 新增了<code>let</code>命令，用来声明变量。它的用法类似于<code>var</code>，但是所声明的变量，只在<code>let</code>命令所在的代码块内有效。</p><pre><code>{\n  let a = 10;\n  var b = 1;\n}\n\na<span spellcheck=\"true\"> // ReferenceError: a is not defined.\n</span>b<span spellcheck=\"true\"> // 1\n</span></code></pre><p>上面代码在代码块之中，分别用<code>let</code>和<code>var</code>声明了两个变量。然后在代码块之外调用这两个变量，结果<code>let</code>声明的变量报错，<code>var</code>声明的变量返回了正确的值。这表明，<code>let</code>声明的变量只在它所在的代码块有效。</p><p><code>for</code>循环的计数器，就很合适使用<code>let</code>命令。</p><pre><code>for (let i = 0; i &lt; 10; i++) {\n <span spellcheck=\"true\"> // ...\n</span>}\n\nconsole.log(i);<span spellcheck=\"true\">\n// ReferenceError: i is not defined\n</span></code></pre><p>上面代码中，计数器<code>i</code>只在<code>for</code>循环体内有效，在循环体外引用就会报错。</p><p>下面的代码如果使用<code>var</code>，最后输出的是<code>10</code>。</p><pre><code>var a = [];\nfor (var i = 0; i &lt; 10; i++) {\n  a[i] = function () {\n    console.log(i);\n  };\n}\na[6]();<span spellcheck=\"true\"> // 10\n</span></code></pre><p>上面代码中，变量<code>i</code>是<code>var</code>命令声明的，在全局范围内都有效，所以全局只有一个变量<code>i</code>。每一次循环，变量<code>i</code>的值都会发生改变，而循环内被赋给数组<code>a</code>的函数内部的<code>console.log(i)</code>，里面的<code>i</code>指向的就是全局的<code>i</code>。也就是说，所有数组<code>a</code>的成员里面的<code>i</code>，指向的都是同一个<code>i</code>，导致运行时输出的是最后一轮的<code>i</code>的值，也就是 10。</p><p>如果使用<code>let</code>，声明的变量仅在块级作用域内有效，最后输出的是 6。</p><pre><code>var a = [];\nfor (let i = 0; i &lt; 10; i++) {\n  a[i] = function () {\n    console.log(i);\n  };\n}\na[6]();<span spellcheck=\"true\"> // 6\n</span></code></pre><p>上面代码中，变量<code>i</code>是<code>let</code>声明的，当前的<code>i</code>只在本轮循环有效，所以每一次循环的<code>i</code>其实都是一个新的变量，所以最后输出的是<code>6</code>。你可能会问，如果每一轮循环的变量<code>i</code>都是重新声明的，那它怎么知道上一轮循环的值，从而计算出本轮循环的值？这是因为 JavaScript 引擎内部会记住上一轮循环的值，初始化本轮的变量<code>i</code>时，就在上一轮循环的基础上进行计算。</p><p>另外，<code>for</code>循环还有一个特别之处，就是设置循环变量的那部分是一个父作用域，而循环体内部是一个单独的子作用域。</p><pre><code>for (let i = 0; i &lt; 3; i++) {\n  let i = 'abc';\n  console.log(i);\n}<span spellcheck=\"true\">\n// abc\n</span><span spellcheck=\"true\">// abc\n</span><span spellcheck=\"true\">// abc\n</span></code></pre><p>上面代码正确运行，输出了 3 次<code>abc</code>。这表明函数内部的变量<code>i</code>与循环变量<code>i</code>不在同一个作用域，有各自单独的作用域。</p><h3 id=\"不存在变量提升\">不存在变量提升</h3><p><code>var</code>命令会发生“变量提升”现象，即变量可以在声明之前使用，值为<code>undefined</code>。这种现象多多少少是有些奇怪的，按照一般的逻辑，变量应该在声明语句之后才可以使用。</p><p>为了纠正这种现象，<code>let</code>命令改变了语法行为，它所声明的变量一定要在声明后使用，否则报错。</p><pre><code><span spellcheck=\"true\">// var 的情况\n</span>console.log(foo);<span spellcheck=\"true\"> // 输出undefined\n</span>var foo = 2;\n<span spellcheck=\"true\">\n// let 的情况\n</span>console.log(bar);<span spellcheck=\"true\"> // 报错ReferenceError\n</span>let bar = 2;\n</code></pre><p>上面代码中，变量<code>foo</code>用<code>var</code>命令声明，会发生变量提升，即脚本开始运行时，变量<code>foo</code>已经存在了，但是没有值，所以会输出<code>undefined</code>。变量<code>bar</code>用<code>let</code>命令声明，不会发生变量提升。这表示在声明它之前，变量<code>bar</code>是不存在的，这时如果用到它，就会抛出一个错误。</p><h3 id=\"暂时性死区\">暂时性死区</h3><p>只要块级作用域内存在<code>let</code>命令，它所声明的变量就“绑定”（binding）这个区域，不再受外部的影响。</p><pre><code>var tmp = 123;\n\nif (true) {\n  tmp = 'abc';<span spellcheck=\"true\"> // ReferenceError\n</span>  let tmp;\n}\n</code></pre><p>上面代码中，存在全局变量<code>tmp</code>，但是块级作用域内<code>let</code>又声明了一个局部变量<code>tmp</code>，导致后者绑定这个块级作用域，所以在<code>let</code>声明变量前，对<code>tmp</code>赋值会报错。</p><p>ES6 明确规定，如果区块中存在<code>let</code>和<code>const</code>命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。</p><p>总之，在代码块内，使用<code>let</code>命令声明变量之前，该变量都是不可用的。这在语法上，称为“暂时性死区”（temporal dead zone，简称 TDZ）。</p><pre><code>if (true) {\n <span spellcheck=\"true\"> // TDZ开始\n</span>  tmp = 'abc';<span spellcheck=\"true\"> // ReferenceError\n</span>  console.log(tmp);<span spellcheck=\"true\"> // ReferenceError\n</span>\n  let tmp;<span spellcheck=\"true\"> // TDZ结束\n</span>  console.log(tmp);<span spellcheck=\"true\"> // undefined\n</span>\n  tmp = 123;\n  console.log(tmp);<span spellcheck=\"true\"> // 123\n</span>}\n</code></pre><p>上面代码中，在<code>let</code>命令声明变量<code>tmp</code>之前，都属于变量<code>tmp</code>的“死区”。</p><p>“暂时性死区”也意味着<code>typeof</code>不再是一个百分之百安全的操作。</p><pre><code>typeof x;<span spellcheck=\"true\"> // ReferenceError\n</span>let x;\n</code></pre><p>上面代码中，变量<code>x</code>使用<code>let</code>命令声明，所以在声明之前，都属于<code>x</code>的“死区”，只要用到该变量就会报错。因此，<code>typeof</code>运行时就会抛出一个<code>ReferenceError</code>。</p><p>作为比较，如果一个变量根本没有被声明，使用<code>typeof</code>反而不会报错。</p><pre><code>typeof undeclared_variable<span spellcheck=\"true\"> // \"undefined\"\n</span></code></pre><p>上面代码中，<code>undeclared_variable</code>是一个不存在的变量名，结果返回“undefined”。所以，在没有<code>let</code>之前，<code>typeof</code>运算符是百分之百安全的，永远不会报错。现在这一点不成立了。这样的设计是为了让大家养成良好的编程习惯，变量一定要在声明之后使用，否则就报错。</p><p>有些“死区”比较隐蔽，不太容易发现。</p><pre><code>function bar(x = y, y = 2) {\n  return [x, y];\n}\n\nbar();<span spellcheck=\"true\"> // 报错\n</span></code></pre><p>上面代码中，调用<code>bar</code>函数之所以报错（某些实现可能不报错），是因为参数<code>x</code>默认值等于另一个参数<code>y</code>，而此时<code>y</code>还没有声明，属于“死区”。如果<code>y</code>的默认值是<code>x</code>，就不会报错，因为此时<code>x</code>已经声明了。</p><pre><code>function bar(x = 2, y = x) {\n  return [x, y];\n}\nbar();<span spellcheck=\"true\"> // [2, 2]\n</span></code></pre><p>另外，下面的代码也会报错，与<code>var</code>的行为不同。</p><pre><code><span spellcheck=\"true\">// 不报错\n</span>var x = x;\n<span spellcheck=\"true\">\n// 报错\n</span>let x = x;<span spellcheck=\"true\">\n// ReferenceError: x is not defined\n</span></code></pre><p>上面代码报错，也是因为暂时性死区。使用<code>let</code>声明变量时，只要变量在还没有声明完成前使用，就会报错。上面这行就属于这个情况，在变量<code>x</code>的声明语句还没有执行完成前，就去取<code>x</code>的值，导致报错”x 未定义“。</p><p>ES6 规定暂时性死区和<code>let</code>、<code>const</code>语句不出现变量提升，主要是为了减少运行时错误，防止在变量声明前就使用这个变量，从而导致意料之外的行为。这样的错误在 ES5 是很常见的，现在有了这种规定，避免此类错误就很容易了。</p><p>总之，暂时性死区的本质就是，只要一进入当前作用域，所要使用的变量就已经存在了，但是不可获取，只有等到声明变量的那一行代码出现，才可以获取和使用该变量。</p><h3 id=\"不允许重复声明\">不允许重复声明</h3><p><code>let</code>不允许在相同作用域内，重复声明同一个变量。</p><pre><code><span spellcheck=\"true\">// 报错\n</span>function func() {\n  let a = 10;\n  var a = 1;\n}\n<span spellcheck=\"true\">\n// 报错\n</span>function func() {\n  let a = 10;\n  let a = 1;\n}\n</code></pre><p>因此，不能在函数内部重新声明参数。</p><pre><code>function func(arg) {\n  let arg;\n}\nfunc()<span spellcheck=\"true\"> // 报错\n</span>\nfunction func(arg) {\n  {\n    let arg;\n  }\n}\nfunc()<span spellcheck=\"true\"> // 不报错\n</span></code></pre><h2 id=\"块级作用域\">块级作用域</h2><h3 id=\"为什么需要块级作用域？\">为什么需要块级作用域？</h3><p>ES5 只有全局作用域和函数作用域，没有块级作用域，这带来很多不合理的场景。</p><p>第一种场景，内层变量可能会覆盖外层变量。</p><pre><code>var tmp = new Date();\n\nfunction f() {\n  console.log(tmp);\n  if (false) {\n    var tmp = 'hello world';\n  }\n}\n\nf();<span spellcheck=\"true\"> // undefined\n</span></code></pre><p>上面代码的原意是，<code>if</code>代码块的外部使用外层的<code>tmp</code>变量，内部使用内层的<code>tmp</code>变量。但是，函数<code>f</code>执行后，输出结果为<code>undefined</code>，原因在于变量提升，导致内层的<code>tmp</code>变量覆盖了外层的<code>tmp</code>变量。</p><p>第二种场景，用来计数的循环变量泄露为全局变量。</p><pre><code>var s = 'hello';\n\nfor (var i = 0; i &lt; s.length; i++) {\n  console.log(s[i]);\n}\n\nconsole.log(i);<span spellcheck=\"true\"> // 5\n</span></code></pre><p>上面代码中，变量<code>i</code>只用来控制循环，但是循环结束后，它并没有消失，泄露成了全局变量。</p><h3 id=\"ES6-的块级作用域\">ES6 的块级作用域</h3><p><code>let</code>实际上为 JavaScript 新增了块级作用域。</p><pre><code>function f1() {\n  let n = 5;\n  if (true) {\n    let n = 10;\n  }\n  console.log(n);<span spellcheck=\"true\"> // 5\n</span>}\n</code></pre><p>上面的函数有两个代码块，都声明了变量<code>n</code>，运行后输出 5。这表示外层代码块不受内层代码块的影响。如果两次都使用<code>var</code>定义变量<code>n</code>，最后输出的值才是 10。</p><p>ES6 允许块级作用域的任意嵌套。</p><pre><code>{{{{\n  {let insane = 'Hello World'}\n  console.log(insane);<span spellcheck=\"true\"> // 报错\n</span>}}}};\n</code></pre><p>上面代码使用了一个五层的块级作用域，每一层都是一个单独的作用域。第四层作用域无法读取第五层作用域的内部变量。</p><p>内层作用域可以定义外层作用域的同名变量。</p><pre><code>{{{{\n  let insane = 'Hello World';\n  {let insane = 'Hello World'}\n}}}};\n</code></pre><p>块级作用域的出现，实际上使得获得广泛应用的匿名立即执行函数表达式（匿名 IIFE）不再必要了。</p><pre><code><span spellcheck=\"true\">// IIFE 写法\n</span>(function () {\n  var tmp = ...;\n  ...\n}());\n<span spellcheck=\"true\">\n// 块级作用域写法\n</span>{\n  let tmp = ...;\n  ...\n}\n</code></pre><h3 id=\"块级作用域与函数声明\">块级作用域与函数声明</h3><p>函数能不能在块级作用域之中声明？这是一个相当令人混淆的问题。</p><p>ES5 规定，函数只能在顶层作用域和函数作用域之中声明，不能在块级作用域声明。</p><pre><code><span spellcheck=\"true\">// 情况一\n</span>if (true) {\n  function f() {}\n}\n<span spellcheck=\"true\">\n// 情况二\n</span>try {\n  function f() {}\n} catch(e) {\n <span spellcheck=\"true\"> // ...\n</span>}\n</code></pre><p>上面两种函数声明，根据 ES5 的规定都是非法的。</p><p>但是，浏览器没有遵守这个规定，为了兼容以前的旧代码，还是支持在块级作用域之中声明函数，因此上面两种情况实际都能运行，不会报错。</p><p>ES6 引入了块级作用域，明确允许在块级作用域之中声明函数。ES6 规定，块级作用域之中，函数声明语句的行为类似于<code>let</code>，在块级作用域之外不可引用。</p><pre><code>function f() { console.log('I am outside!'); }\n\n(function () {\n  if (false) {\n   <span spellcheck=\"true\"> // 重复声明一次函数f\n</span>    function f() { console.log('I am inside!'); }\n  }\n\n  f();\n}());\n</code></pre><p>上面代码在 ES5 中运行，会得到“I am inside!”，因为在<code>if</code>内声明的函数<code>f</code>会被提升到函数头部，实际运行的代码如下。</p><pre><code><span spellcheck=\"true\">// ES5 环境\n</span>function f() { console.log('I am outside!'); }\n\n(function () {\n  function f() { console.log('I am inside!'); }\n  if (false) {\n  }\n  f();\n}());\n</code></pre><p>ES6 就完全不一样了，理论上会得到“I am outside!”。因为块级作用域内声明的函数类似于<code>let</code>，对作用域之外没有影响。但是，如果你真的在 ES6 浏览器中运行一下上面的代码，是会报错的，这是为什么呢？</p><pre><code><span spellcheck=\"true\">// 浏览器的 ES6 环境\n</span>function f() { console.log('I am outside!'); }\n\n(function () {\n  if (false) {\n   <span spellcheck=\"true\"> // 重复声明一次函数f\n</span>    function f() { console.log('I am inside!'); }\n  }\n\n  f();\n}());<span spellcheck=\"true\">\n// Uncaught TypeError: f is not a function\n</span></code></pre><p>上面的代码在 ES6 浏览器中，都会报错。</p><p>原来，如果改变了块级作用域内声明的函数的处理规则，显然会对老代码产生很大影响。为了减轻因此产生的不兼容问题，ES6 在<a href=\"http://www.ecma-international.org/ecma-262/6.0/index.html#sec-block-level-function-declarations-web-legacy-compatibility-semantics\">附录 B</a>里面规定，浏览器的实现可以不遵守上面的规定，有自己的<a href=\"http://stackoverflow.com/questions/31419897/what-are-the-precise-semantics-of-block-level-functions-in-es6\">行为方式</a>。</p><ul><li>允许在块级作用域内声明函数。</li><li>函数声明类似于<code>var</code>，即会提升到全局作用域或函数作用域的头部。</li><li>同时，函数声明还会提升到所在的块级作用域的头部。</li></ul><p>注意，上面三条规则只对 ES6 的浏览器实现有效，其他环境的实现不用遵守，还是将块级作用域的函数声明当作<code>let</code>处理。</p><p>根据这三条规则，浏览器的 ES6 环境中，块级作用域内声明的函数，行为类似于<code>var</code>声明的变量。上面的例子实际运行的代码如下。</p><pre><code><span spellcheck=\"true\">// 浏览器的 ES6 环境\n</span>function f() { console.log('I am outside!'); }\n(function () {\n  var f = undefined;\n  if (false) {\n    function f() { console.log('I am inside!'); }\n  }\n\n  f();\n}());<span spellcheck=\"true\">\n// Uncaught TypeError: f is not a function\n</span></code></pre><p>考虑到环境导致的行为差异太大，应该避免在块级作用域内声明函数。如果确实需要，也应该写成函数表达式，而不是函数声明语句。</p><pre><code><span spellcheck=\"true\">// 块级作用域内部的函数声明语句，建议不要使用\n</span>{\n  let a = 'secret';\n  function f() {\n    return a;\n  }\n}\n<span spellcheck=\"true\">\n// 块级作用域内部，优先使用函数表达式\n</span>{\n  let a = 'secret';\n  let f = function () {\n    return a;\n  };\n}\n</code></pre><p>另外，还有一个需要注意的地方。ES6 的块级作用域必须有大括号，如果没有大括号，JavaScript 引擎就认为不存在块级作用域。</p><pre><code><span spellcheck=\"true\">// 第一种写法，报错\n</span>if (true) let x = 1;\n<span spellcheck=\"true\">\n// 第二种写法，不报错\n</span>if (true) {\n  let x = 1;\n}\n</code></pre><p>上面代码中，第一种写法没有大括号，所以不存在块级作用域，而<code>let</code>只能出现在当前作用域的顶层，所以报错。第二种写法有大括号，所以块级作用域成立。</p><p>函数声明也是如此，严格模式下，函数只能声明在当前作用域的顶层。</p><pre><code><span spellcheck=\"true\">// 不报错\n</span>'use strict';\nif (true) {\n  function f() {}\n}\n<span spellcheck=\"true\">\n// 报错\n</span>'use strict';\nif (true)\n  function f() {}\n</code></pre><h2 id=\"const-命令\">const 命令</h2><h3 id=\"基本用法\">基本用法</h3><p><code>const</code>声明一个只读的常量。一旦声明，常量的值就不能改变。</p><pre><code>const PI = 3.1415;\nPI<span spellcheck=\"true\"> // 3.1415\n</span>\nPI = 3;<span spellcheck=\"true\">\n// TypeError: Assignment to constant variable.\n</span></code></pre><p>上面代码表明改变常量的值会报错。</p><p><code>const</code>声明的变量不得改变值，这意味着，<code>const</code>一旦声明变量，就必须立即初始化，不能留到以后赋值。</p><pre><code>const foo;<span spellcheck=\"true\">\n// SyntaxError: Missing initializer in const declaration\n</span></code></pre><p>上面代码表示，对于<code>const</code>来说，只声明不赋值，就会报错。</p><p><code>const</code>的作用域与<code>let</code>命令相同：只在声明所在的块级作用域内有效。</p><pre><code>if (true) {\n  const MAX = 5;\n}\n\nMAX<span spellcheck=\"true\"> // Uncaught ReferenceError: MAX is not defined\n</span></code></pre><p><code>const</code>命令声明的常量也是不提升，同样存在暂时性死区，只能在声明的位置后面使用。</p><pre><code>if (true) {\n  console.log(MAX);<span spellcheck=\"true\"> // ReferenceError\n</span>  const MAX = 5;\n}\n</code></pre><p>上面代码在常量<code>MAX</code>声明之前就调用，结果报错。</p><p><code>const</code>声明的常量，也与<code>let</code>一样不可重复声明。</p><pre><code>var message = \"Hello!\";\nlet age = 25;\n<span spellcheck=\"true\">\n// 以下两行都会报错\n</span>const message = \"Goodbye!\";\nconst age = 30;\n</code></pre><h3 id=\"本质\">本质</h3><p><code>const</code>实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址所保存的数据不得改动。对于简单类型的数据（数值、字符串、布尔值），值就保存在变量指向的那个内存地址，因此等同于常量。但对于复合类型的数据（主要是对象和数组），变量指向的内存地址，保存的只是一个指向实际数据的指针，<code>const</code>只能保证这个指针是固定的（即总是指向另一个固定的地址），至于它指向的数据结构是不是可变的，就完全不能控制了。因此，将一个对象声明为常量必须非常小心。</p><pre><code>const foo = {};\n<span spellcheck=\"true\">\n// 为 foo 添加一个属性，可以成功\n</span>foo.prop = 123;\nfoo.prop<span spellcheck=\"true\"> // 123\n</span><span spellcheck=\"true\">\n// 将 foo 指向另一个对象，就会报错\n</span>foo = {};<span spellcheck=\"true\"> // TypeError: \"foo\" is read-only\n</span></code></pre><p>上面代码中，常量<code>foo</code>储存的是一个地址，这个地址指向一个对象。不可变的只是这个地址，即不能把<code>foo</code>指向另一个地址，但对象本身是可变的，所以依然可以为其添加新属性。</p><p>下面是另一个例子。</p><pre><code>const a = [];\na.push('Hello');<span spellcheck=\"true\"> // 可执行\n</span>a.length = 0;   <span spellcheck=\"true\"> // 可执行\n</span>a = ['Dave'];   <span spellcheck=\"true\"> // 报错\n</span></code></pre><p>上面代码中，常量<code>a</code>是一个数组，这个数组本身是可写的，但是如果将另一个数组赋值给<code>a</code>，就会报错。</p><p>如果真的想将对象冻结，应该使用<code>Object.freeze</code>方法。</p><pre><code>const foo = Object.freeze({});\n<span spellcheck=\"true\">\n// 常规模式时，下面一行不起作用；\n</span><span spellcheck=\"true\">// 严格模式时，该行会报错\n</span>foo.prop = 123;\n</code></pre><p>上面代码中，常量<code>foo</code>指向一个冻结的对象，所以添加新属性不起作用，严格模式时还会报错。</p><p>除了将对象本身冻结，对象的属性也应该冻结。下面是一个将对象彻底冻结的函数。</p><pre><code>var constantize = (obj) =&gt; {\n  Object.freeze(obj);\n  Object.keys(obj).forEach( (key, i) =&gt; {\n    if ( typeof obj[key] === 'object' ) {\n      constantize( obj[key] );\n    }\n  });\n};\n</code></pre><h3 id=\"ES6-声明变量的六种方法\">ES6 声明变量的六种方法</h3><p>ES5 只有两种声明变量的方法：<code>var</code>命令和<code>function</code>命令。ES6 除了添加<code>let</code>和<code>const</code>命令，后面章节还会提到，另外两种声明变量的方法：<code>import</code>命令和<code>class</code>命令。所以，ES6 一共有 6 种声明变量的方法。</p><h2 id=\"顶层对象的属性\">顶层对象的属性</h2><p>顶层对象，在浏览器环境指的是<code>window</code>对象，在 Node 指的是<code>global</code>对象。ES5 之中，顶层对象的属性与全局变量是等价的。</p><pre><code>window.a = 1;\na<span spellcheck=\"true\"> // 1\n</span>\na = 2;\nwindow.a<span spellcheck=\"true\"> // 2\n</span></code></pre><p>上面代码中，顶层对象的属性赋值与全局变量的赋值，是同一件事。</p><p>顶层对象的属性与全局变量挂钩，被认为是 JavaScript 语言最大的设计败笔之一。这样的设计带来了几个很大的问题，首先是没法在编译时就报出变量未声明的错误，只有运行时才能知道（因为全局变量可能是顶层对象的属性创造的，而属性的创造是动态的）；其次，程序员很容易不知不觉地就创建了全局变量（比如打字出错）；最后，顶层对象的属性是到处可以读写的，这非常不利于模块化编程。另一方面，<code>window</code>对象有实体含义，指的是浏览器的窗口对象，顶层对象是一个有实体含义的对象，也是不合适的。</p><p>ES6 为了改变这一点，一方面规定，为了保持兼容性，<code>var</code>命令和<code>function</code>命令声明的全局变量，依旧是顶层对象的属性；另一方面规定，<code>let</code>命令、<code>const</code>命令、<code>class</code>命令声明的全局变量，不属于顶层对象的属性。也就是说，从 ES6 开始，全局变量将逐步与顶层对象的属性脱钩。</p><pre><code>var a = 1;<span spellcheck=\"true\">\n// 如果在 Node 的 REPL 环境，可以写成 global.a\n</span><span spellcheck=\"true\">// 或者采用通用方法，写成 this.a\n</span>window.a<span spellcheck=\"true\"> // 1\n</span>\nlet b = 1;\nwindow.b<span spellcheck=\"true\"> // undefined\n</span></code></pre><p>上面代码中，全局变量<code>a</code>由<code>var</code>命令声明，所以它是顶层对象的属性；全局变量<code>b</code>由<code>let</code>命令声明，所以它不是顶层对象的属性，返回<code>undefined</code>。</p><h2 id=\"globalThis-对象\">globalThis 对象</h2><p>JavaScript 语言存在一个顶层对象，它提供全局环境（即全局作用域），所有代码都是在这个环境中运行。但是，顶层对象在各种实现里面是不统一的。</p><ul><li>浏览器里面，顶层对象是<code>window</code>，但 Node 和 Web Worker 没有<code>window</code>。</li><li>浏览器和 Web Worker 里面，<code>self</code>也指向顶层对象，但是 Node 没有<code>self</code>。</li><li>Node 里面，顶层对象是<code>global</code>，但其他环境都不支持。</li></ul><p>同一段代码为了能够在各种环境，都能取到顶层对象，现在一般是使用<code>this</code>变量，但是有局限性。</p><ul><li>全局环境中，<code>this</code>会返回顶层对象。但是，Node 模块和 ES6 模块中，<code>this</code>返回的是当前模块。</li><li>函数里面的<code>this</code>，如果函数不是作为对象的方法运行，而是单纯作为函数运行，<code>this</code>会指向顶层对象。但是，严格模式下，这时<code>this</code>会返回<code>undefined</code>。</li><li>不管是严格模式，还是普通模式，<code>new Function('return this')()</code>，总是会返回全局对象。但是，如果浏览器用了 CSP（Content Security Policy，内容安全策略），那么<code>eval</code>、<code>new Function</code>这些方法都可能无法使用。</li></ul><p>综上所述，很难找到一种方法，可以在所有情况下，都取到顶层对象。下面是两种勉强可以使用的方法。</p><pre><code><span spellcheck=\"true\">// 方法一\n</span>(typeof window !== 'undefined'\n   ? window\n   : (typeof process === 'object' &amp;&amp;\n      typeof require === 'function' &amp;&amp;\n      typeof global === 'object')\n     ? global\n     : this);\n<span spellcheck=\"true\">\n// 方法二\n</span>var getGlobal = function () {\n  if (typeof self !== 'undefined') { return self; }\n  if (typeof window !== 'undefined') { return window; }\n  if (typeof global !== 'undefined') { return global; }\n  throw new Error('unable to locate global object');\n};\n</code></pre><p><a href=\"https://github.com/tc39/proposal-global\">ES2020</a>&nbsp;在语言标准的层面，引入<code>globalThis</code>作为顶层对象。也就是说，任何环境下，<code>globalThis</code>都是存在的，都可以从它拿到顶层对象，指向全局环境下的<code>this</code>。</p><p>垫片库<a href=\"https://github.com/ungap/global-this\"><code>global-this</code></a>模拟了这个提案，可以在所有环境拿到<code>globalThis</code>。</p>",
		  "author": "inory",
		  "time": "2020-7-14",
		  "id": "3",
		  "imgurl": "https://uploadstatic.mihoyo.com/contentweb/20191115/2019111511160269236.jpg"
		},     
		{
		  "title": "ES/567书籍",
		  "content": "<div><p><span style=\"font-weight: 700;\">在简书上看到一篇文章，看到这个电子书链接，挺不错的，推荐大家去学习，学完ES5,6,7之后我会深入算法，过去是我过于迷茫，不懂得如何学习，总以为能写几个小网站就很厉害了，其实不然，扎实的基础，会让你学习框架游刃有余，框架只是对基础经行封装，可读性更高，易上手，可能你会用，但是你并不知道他为什么这样用，等他下次框架更新，万一他把你最常用的东西去掉了，可能你又要花大量的时间去学习，所以，扎实的基础是非常必要的。这个博客网站以后也会重构代码，写的实在是太拉闸了，虽然看着还行，下面附上链接：</span></p><p><span style=\"font-weight: 700;\"><br></span></p><p><strong>ES5电子教程</strong></p>\n<blockquote>\n<p>中文版：<a href=\"https://link.jianshu.com?t=http://yanhaijing.com/es5/#58\" target=\"_blank\" rel=\"nofollow\">http://yanhaijing.com/es5/#58</a><br>\n英文版：<a href=\"https://link.jianshu.com?t=https://people-mozilla.org/~jorendorff/es5.1-final.html\" target=\"_blank\" rel=\"nofollow\">https://people-mozilla.org/~jorendorff/es5.1-final.html</a></p>\n</blockquote>\n<p><strong>ES6电子教程</strong></p>\n<blockquote>\n<p>中文版：<a href=\"https://link.jianshu.com?t=http://es6.ruanyifeng.com/\" target=\"_blank\" rel=\"nofollow\">http://es6.ruanyifeng.com/</a><br>\n英文版：<a href=\"https://link.jianshu.com?t=http://www.ecma-international.org/ecma-262/6.0/#sec-type\" target=\"_blank\" rel=\"nofollow\">http://www.ecma-international.org/ecma-262/6.0/#sec-type</a><br>\nES6的浏览器兼容性问题： <a href=\"https://link.jianshu.com?t=https://segmentfault.com/a/1190000005128101\" target=\"_blank\" rel=\"nofollow\">https://segmentfault.com/a/1190000005128101</a></p>\n</blockquote>\n<p><strong>ES7电子教程</strong></p>\n<blockquote>\n<p>英文版：<a href=\"https://link.jianshu.com?t=http://www.ecma-international.org/ecma-262/7.0/index.html\" target=\"_blank\" rel=\"nofollow\">http://www.ecma-international.org/ecma-262/7.0/index.html</a></p></blockquote></div><br><br>作者：lzyuan<br>链接：https://www.jianshu.com/p/e90c447aa645<br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。",
		  "author": "inory",
		  "time": "2020-7-14",
		  "id": "4",
		  "imgurl": "https://uploadstatic.mihoyo.com/contentweb/20200313/2020031319071683018.jpg"
		}
    ]
}